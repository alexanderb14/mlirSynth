// RUN: synthesizer %s --num-threads=32 --ignore-equivalent-candidates --ops=stablehlo.dot,chlo.broadcast_subtract --distribute | FileCheck %s

// CHECK:     stablehlo.dot
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @fn_2(%arg0: memref<3xf64>, %arg1: memref<5x3xf64>, %arg2: memref<3xf64>) {
    %cst = arith.constant 0.000000e+00 : f64
    %alloc = memref.alloc() : memref<5x3xf64>
    affine.for %arg3 = 0 to 3 {
      affine.for %arg4 = 0 to 5 {
        affine.store %cst, %alloc[%arg4, %arg3] : memref<5x3xf64>
        %0 = affine.load %arg1[%arg4, %arg3] : memref<5x3xf64>
        %1 = affine.load %arg2[%arg3] : memref<3xf64>
        %2 = arith.subf %0, %1 : f64
        %3 = arith.mulf %2, %2 : f64
        affine.store %3, %alloc[%arg4, %arg3] : memref<5x3xf64>
      }
    }
    return
  }
}

