
module {
  func.func @foo(%arg0: memref<3xf64>, %arg1: memref<3xf64>, %arg2: memref<3xf64>, %arg3: memref<3xf64>, %arg4: memref<3x3xf64>) -> memref<3x3xf64> attributes {llvm.emit_c_interface,irsynth.original} {
    affine.for %arg5 = 0 to 3 {
      affine.for %arg6 = 0 to 3 {
        %0 = affine.load %arg0[%arg6] : memref<3xf64>
        %1 = affine.load %arg1[%arg5] : memref<3xf64>
        %2 = arith.mulf %0, %1 : f64
        %3 = affine.load %arg2[%arg6] : memref<3xf64>
        %4 = affine.load %arg3[%arg5] : memref<3xf64>
        %5 = arith.mulf %3, %4 : f64
        %6 = arith.addf %2, %5 : f64
        affine.store %6, %arg4[%arg6, %arg5] : memref<3x3xf64>
      }
    }
    return %arg4 : memref<3x3xf64>
  }

  func.func @fn_0_raised(%arg0: tensor<3xf64>, %arg1: tensor<3xf64>, %arg2: tensor<3xf64>, %arg3: tensor<3xf64>, %arg4: tensor<3x3xf64>) -> tensor<3x3xf64> attributes {irsynth.raised} {
    %0 = mhlo.constant dense<[3, 1]> : tensor<2xi64>
    %1 = mhlo.dynamic_reshape %arg0, %0 : (tensor<3xf64>, tensor<2xi64>) -> tensor<3x1xf64>
    %2 = mhlo.constant dense<[1, 3]> : tensor<2xi64>
    %3 = mhlo.dynamic_reshape %arg1, %2 : (tensor<3xf64>, tensor<2xi64>) -> tensor<1x3xf64>
    %4 = "mhlo.dot"(%1, %3) : (tensor<3x1xf64>, tensor<1x3xf64>) -> tensor<3x3xf64>

    %5 = mhlo.constant dense<[3, 1]> : tensor<2xi64>
    %6 = mhlo.dynamic_reshape %arg2, %5 : (tensor<3xf64>, tensor<2xi64>) -> tensor<3x1xf64>
    %7 = mhlo.constant dense<[1, 3]> : tensor<2xi64>
    %8 = mhlo.dynamic_reshape %arg3, %7 : (tensor<3xf64>, tensor<2xi64>) -> tensor<1x3xf64>
    %9 = "mhlo.dot"(%6, %8) : (tensor<3x1xf64>, tensor<1x3xf64>) -> tensor<3x3xf64>

    %10 = "mhlo.add"(%4, %9) : (tensor<3x3xf64>, tensor<3x3xf64>) -> tensor<3x3xf64>

    return %10 : tensor<3x3xf64>
  }
}
