commit 8a94897cd06b456175964064a5b31c772f95209b
Author: Alexander Brauckmann <a.brauckmann@gmail.com>
Date:   Thu Oct 19 19:02:17 2023 +0200

    Add emit-c support for some memref, arith ops

diff --git a/mlir/lib/Target/Cpp/TranslateRegistration.cpp b/mlir/lib/Target/Cpp/TranslateRegistration.cpp
index b486e5429ea6..40cde185a3a3 100644
--- a/mlir/lib/Target/Cpp/TranslateRegistration.cpp
+++ b/mlir/lib/Target/Cpp/TranslateRegistration.cpp
@@ -11,6 +11,7 @@
 #include "mlir/Dialect/EmitC/IR/EmitC.h"
 #include "mlir/Dialect/Func/IR/FuncOps.h"
 #include "mlir/Dialect/Math/IR/Math.h"
+#include "mlir/Dialect/MemRef/IR/MemRef.h"
 #include "mlir/Dialect/SCF/IR/SCF.h"
 #include "mlir/IR/BuiltinOps.h"
 #include "mlir/IR/Dialect.h"
@@ -46,7 +47,8 @@ void registerToCppTranslation() {
                         emitc::EmitCDialect,
                         func::FuncDialect,
                         math::MathDialect,
-                        scf::SCFDialect>();
+                        scf::SCFDialect,
+                        memref::MemRefDialect>();
         // clang-format on
       });
 }
diff --git a/mlir/lib/Target/Cpp/TranslateToCpp.cpp b/mlir/lib/Target/Cpp/TranslateToCpp.cpp
index a1f6886a8ae4..0a4990f9aa8b 100644
--- a/mlir/lib/Target/Cpp/TranslateToCpp.cpp
+++ b/mlir/lib/Target/Cpp/TranslateToCpp.cpp
@@ -10,6 +10,7 @@
 #include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
 #include "mlir/Dialect/EmitC/IR/EmitC.h"
 #include "mlir/Dialect/Func/IR/FuncOps.h"
+#include "mlir/Dialect/MemRef/IR/MemRef.h"
 #include "mlir/Dialect/SCF/IR/SCF.h"
 #include "mlir/IR/BuiltinOps.h"
 #include "mlir/IR/BuiltinTypes.h"
@@ -266,12 +267,24 @@ static LogicalResult printOperation(CppEmitter &emitter, emitc::AddOp addOp) {
   return printBinaryArithOperation(emitter, operation, "+");
 }
 
+static LogicalResult printOperation(CppEmitter &emitter, arith::AddFOp addfOp) {
+  Operation *operation = addfOp.getOperation();
+
+  return printBinaryArithOperation(emitter, operation, "+");
+}
+
 static LogicalResult printOperation(CppEmitter &emitter, emitc::SubOp subOp) {
   Operation *operation = subOp.getOperation();
 
   return printBinaryArithOperation(emitter, operation, "-");
 }
 
+static LogicalResult printOperation(CppEmitter &emitter, arith::MulFOp mulfOp) {
+  Operation *operation = mulfOp.getOperation();
+
+  return printBinaryArithOperation(emitter, operation, "*");
+}
+
 static LogicalResult printOperation(CppEmitter &emitter,
                                     cf::BranchOp branchOp) {
   raw_ostream &os = emitter.ostream();
@@ -589,6 +602,50 @@ static LogicalResult printOperation(CppEmitter &emitter, scf::YieldOp yieldOp) {
   return success();
 }
 
+static LogicalResult printOperation(CppEmitter &emitter,
+                                    memref::AllocOp allocOp) {
+  raw_ostream &os = emitter.ostream();
+
+  for (auto res : allocOp->getResults()) {
+    if (failed(emitter.emitVariableDeclaration(res,
+                                               /*trailingSemicolon=*/false)))
+      return failure();
+  }
+  return success();
+}
+
+static LogicalResult printOperation(CppEmitter &emitter,
+                                    memref::DeallocOp deallocOp) {
+  return success();
+}
+
+static LogicalResult printOperation(CppEmitter &emitter,
+                                    memref::StoreOp storeOp) {
+  raw_ostream &os = emitter.ostream();
+
+  os << emitter.getOrCreateName(storeOp.getMemRef());
+  for (auto indice : storeOp.getIndices()) {
+    os << "[" << emitter.getOrCreateName(indice) << "]";
+  }
+  os << " = " << emitter.getOrCreateName(storeOp.getValue());
+
+  return success();
+}
+
+static LogicalResult printOperation(CppEmitter &emitter,
+                                    memref::LoadOp loadOp) {
+  raw_ostream &os = emitter.ostream();
+
+  os << emitter.getOrCreateName(loadOp) << " = ";
+
+  os << emitter.getOrCreateName(loadOp.getMemRef());
+  for (auto indice : loadOp.getIndices()) {
+    os << "[" << emitter.getOrCreateName(indice) << "]";
+  }
+
+  return success();
+}
+
 static LogicalResult printOperation(CppEmitter &emitter,
                                     func::ReturnOp returnOp) {
   raw_ostream &os = emitter.ostream();
@@ -969,6 +1026,19 @@ LogicalResult CppEmitter::emitOperation(Operation &op, bool trailingSemicolon) {
           // Arithmetic ops.
           .Case<arith::ConstantOp>(
               [&](auto op) { return printOperation(*this, op); })
+          .Case<arith::AddFOp, arith::MulFOp>(
+              [&](auto op) { return printOperation(*this, op); })
+
+          // Memref ops.
+          .Case<memref::AllocOp>(
+              [&](auto op) { return printOperation(*this, op); })
+          .Case<memref::DeallocOp>(
+              [&](auto op) { return printOperation(*this, op); })
+          .Case<memref::StoreOp>(
+              [&](auto op) { return printOperation(*this, op); })
+          .Case<memref::LoadOp>(
+              [&](auto op) { return printOperation(*this, op); })
+
           .Default([&](Operation *) {
             return op.emitOpError("unable to find printer for op");
           });
@@ -1024,6 +1094,16 @@ LogicalResult CppEmitter::emitType(Location loc, Type type) {
     os << ">";
     return success();
   }
+  if (auto mType = dyn_cast<MemRefType>(type)) {
+    if (failed(emitType(loc, mType.getElementType())))
+      return failure();
+
+    auto shape = mType.getShape();
+    for (auto dimSize : shape) {
+      os << "[" << dimSize << "]";
+    }
+    return success();
+  }
   if (auto tType = dyn_cast<TupleType>(type))
     return emitTupleType(loc, tType.getTypes());
   if (auto oType = dyn_cast<emitc::OpaqueType>(type)) {
